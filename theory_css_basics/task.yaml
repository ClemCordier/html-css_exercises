author: ''
contact_url: ''
context: |-
    Maintenant que les bases de l'HTML ont été abordées, nous pouvons nous pencher sur le langage qui va venir styliser nos pages: le CSS (de l'anglais, *Cascading Style Sheets*)

    La syntaxe CSS diffère de ce qu'on a pu voir jusqu'à maintenant en HTML, mais elle n'en reste pas moins très facile d'accès.

    En voici un premier exemple:

    .. code:: css

        p {
            color: blue;
        }

    Ce bloc de code, dans son ensemble, s'appelle une *règle* en CSS.

    Une règle peut être décomposée en 3 sous-parties : le *sélecteur* (``p``), la *propriété* (``color``) et la *valeur* (``blue``):

    .. code:: css

        selector {
            property: value;
        }

    | La paire propriété-valeur(s), séparée par deux points et terminée par un point-virgule (``property: value;``), est appelée une *déclaration*.
    |

    Le ``p`` vous est certainement familier: il fait référence à l'élément paragraphe abordé dans la section HTML.

    Sous sa forme la plus simple dans l'exemple, le sélecteur correspond à un élément HTML [#]_. Comme son nom l'indique, il définit quel élément sera concerné par la règle.

    La règle ci-dessus appliquera la couleur bleue à l'ensemble des paragraphes de notre document.

    ----

    Un fichier CSS peut contenir autant de règles que vous le désirez. Celles-ci ne nécessitent pas de délimiteur spécifique pour les séparer.

    De même, une règle peut contenir autant de déclarations que vous le désirez, mais elles doivent être séparées les unes des autres par le caractère "``;``".

    Avec ce bout de code HTML:

    .. code:: html

        <h1>Un titre générique</h1>
        <p>Un premier paragraphe.</p>
        <p>Un second paragraphe.</p>

    auquel les règles CSS suivantes sont appliquées:

    .. code:: css

        h1 {
            color: yellow;
            background-color: red;
        }

        p {
            color: yellow;
            background-color: blue;
        }

    On obtient le résultat suivant:

    +--------------------------------------------------------+
    | .. image:: theory_css_basics/multiple_selector.png     |
    +--------------------------------------------------------+

    ----

    Comme pour HTML, les espaces en CSS sont *généralement* ignorés par le navigateur.

    Nous pourrions par exemple écrire:

    .. code:: css

        h1{color:yellow;background-color:red;}p{color:yellow;background-color: blue;}


    Bien que valide, on évitera toutefois cette notation pour favoriser une meilleure lisibilité de notre code.

    **Attention !** Tous les espaces ne sont pas optionnels pour autant.

    Les règles suivantes:

    .. code:: css

        h1 {
            color: yellow;
            background- color: red;
        }

        p {
            color: yellow;
            background -color: blue;
        }

    ne sont quant à elles pas valides, de par les espaces au niveau de la propriété ``background-color``.

    .. note::

        | En cas d'invalidité d'une propriété ou de sa valeur (par exemple suite à une erreur de syntaxe de la part du développeur...), la déclaration sera tout simplement ignorée par le navigateur.
        |
        | De même, si un sélecteur ne peut pas être interprété par le navigateur, ce dernier va ignorer la règle concernée et passer à la suivante.

    ----

    A noter que l'on peut appliquer une même règle à plusieurs éléments en séparant les sélecteurs par des virgules. Cela permet notamment d'éviter de la redondance inutile.

    Nous pouvons adapter notre CSS d'exemple précédent en regroupant les éléments ayant des déclarations identiques, comme ceci:

    .. code:: css

        h1, p {
            color: yellow;
        }

        h1 {
            background-color: red;
        }

        p {
            background-color: blue;
        }

    Nous obtiendrons exactement le même résultat.

    N'hésitez pas à observer ce résultat via la zone bac à sable en faisant un copier-coller des règles fournies en exemple (ou en expérimentant par vous-mêmes !)

    .. raw:: html

        <p class="codepen" data-height="300" data-default-tab="css,result" data-slug-hash="rNqaEJm" data-editable="true" data-user="clem09" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
        </p>
        <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ----

    Il est important de comprendre une chose: **tout élément HTML se voit assigner une valeur par défaut pour toutes les propriétés CSS qui lui sont applicables.**

    Ces valeurs sont définies dans les spécifications établies par diverses organisations de standardisation (telle que W3C mentionnée en introduction de la section HTML).

    | C'est la raison pour laquelle notre titre de section ``h1`` se retrouve avec une police d'écriture en gras et plus grande que nos paragraphes, alors même que nous leur avons appliqué aucun style.
    | De même pour nos listes ``ul`` et ``ol`` dont les items sont accompagnés de puces/numéros.
    |

    Ces spécifications restent toutefois théoriques: les navigateurs sont libres de ne pas les suivre à la lettre.

    | De plus, les navigateurs ne sont pas constamment mis à jour lorsqu'une nouvelle fonctionnalité apparaît.
    | Certains vont l'implémenter même si elle n'est pas encore standardisée, d'autres sont fidèles aux spécifications, ...
    |

    C'est la raison pour laquelle on parle de *compatibilité* d'une propriété, propre à chaque navigateur.
    Autrement dit: est-elle prise en charge par un navigateur donné ?

    Cette compatibilité est répertoriée pour une propriété donnée sous forme de tableau en bas de sa page de documentation MDN:

    .. image:: theory_css_basics/compatibility_table.png


    |
    | Dans la première partie du cours, nous allons voir les différentes façons d'insérer du CSS à un fichier HTML existant.
    | Nous verrons ensuite diverses propriétés CSS et leur application.
    |

    .. note::

        .. [#] Cette catégorie de sélecteur porte le nom de **sélecteur de type**.
environment_id: mcq
environment_parameters: {}
environment_type: mcq
file: ''
input_random: 0
name: '[Théorie] Syntaxe CSS'
network_grading: false
problems:
    validation_check:
        type: multiple_choice
        name: Lecture complétée
        header: Une fois la théorie parcourue, validez pour passer à la suite du cours.
        limit: 0
        choices:
        -   text: Je confirme avoir pourcouru la théorie
            valid: true
